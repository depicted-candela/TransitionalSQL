-- =============================================================================
-- Oracle Performance Tuning Exercise: Data Setup
-- =============================================================================
-- This script prepares the environment for the "Speed Unleashed" exercises.
-- It creates a dedicated user, tables, and populates them with a large,
-- deliberately skewed dataset designed to make the performance impact of
-- different indexing strategies obvious and measurable.
-- =============================================================================

-- Set session settings for better script execution feedback in SQL*Plus / SQLcl
SET ECHO ON
SET FEEDBACK ON
SET SERVEROUTPUT ON

PROMPT --- Dropping existing user 'speedUnleash' to ensure a clean slate...
-- Connect as a user with DBA privileges (e.g., SYSTEM or SYS) to run this first part.
DROP USER speedUnleash CASCADE;

PROMPT --- Creating user 'speedUnleash' and granting necessary privileges...
CREATE USER speedUnleash IDENTIFIED BY speedUnleash; -- Using a simple password for the workshop
GRANT CONNECT, RESOURCE, UNLIMITED TABLESPACE TO speedUnleash;
ALTER USER speedUnleash QUOTA UNLIMITED ON USERS;
GRANT CREATE VIEW, CREATE PROCEDURE, CREATE TRIGGER TO speedUnleash;

PROMPT --- SETUP COMPLETE FOR ADMIN USER. ---
PROMPT --- PLEASE DISCONNECT AND RECONNECT AS 'speedUnleash' / 'speedUnleash' TO CONTINUE. ---

-- =============================================================================
-- THE REMAINDER OF THE SCRIPT MUST BE RUN AS THE 'speedUnleash' USER
-- =============================================================================

PROMPT --- Creating Tables for speedUnleash schema...

-- The 'customers' table includes a self-referencing key for hierarchical data,
-- essential for the 'CONNECT BY' query in the final problem.
CREATE TABLE speedUnleash.customers (
    customerId NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    customerName VARCHAR2(100) NOT NULL,
    region VARCHAR2(10) NOT NULL,
    registrationDate DATE NOT NULL,
    managerId NUMBER,
    CONSTRAINT fk_manager FOREIGN KEY (managerId) REFERENCES speedUnleash.customers(customerId)
);

CREATE TABLE speedUnleash.products (
    productId NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    productName VARCHAR2(100) NOT NULL,
    category VARCHAR2(50) NOT NULL
);

-- The 'customerOrders' table is the main fact table.
-- 'orderStatus' is designed with low cardinality for the Bitmap Index exercise.
CREATE TABLE speedUnleash.customerOrders (
    orderId NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    customerId NUMBER NOT NULL,
    productId NUMBER NOT NULL,
    orderDate DATE NOT NULL,
    orderStatus VARCHAR2(15),
    quantity NUMBER(10) NOT NULL,
    unitPrice NUMBER(10, 2) NOT NULL,
    CONSTRAINT fk_customer FOREIGN KEY (customerId) REFERENCES speedUnleash.customers(customerId),
    CONSTRAINT fk_product FOREIGN KEY (productId) REFERENCES speedUnleash.products(productId)
);

PROMPT --- Tables created successfully. Populating with data...

-- Populate 'customers' with a clear hierarchy for the final problem.
-- Note the case difference in 'southern cross' for the function-based index requirement.
INSERT INTO speedUnleash.customers (customerId, customerName, region, registrationDate, managerId) 
VALUES (1, 'Global Corp', 'AMER', DATE '2022-01-10', NULL);
INSERT INTO speedUnleash.customers (customerId, customerName, region, registrationDate, managerId) 
VALUES (2, 'National Inc', 'AMER', DATE '2022-02-15', 1);
INSERT INTO speedUnleash.customers (customerId, customerName, region, registrationDate, managerId) 
VALUES (3, 'Statewide LLC', 'AMER', DATE '2022-03-20', 2);
INSERT INTO speedUnleash.customers (customerId, customerName, region, registrationDate, managerId) 
VALUES (4, 'Local Services', 'AMER', DATE '2022-04-25', 3);
INSERT INTO speedUnleash.customers (customerId, customerName, region, registrationDate, managerId) 
VALUES (5, 'Euro Group', 'EMEA', DATE '2022-01-15', NULL);
INSERT INTO speedUnleash.customers (customerId, customerName, region, registrationDate, managerId) 
VALUES (6, 'DE Holdings', 'EMEA', DATE '2022-02-20', 5);
INSERT INTO speedUnleash.customers (customerId, customerName, region, registrationDate, managerId) 
VALUES (7, 'UK Ventures', 'EMEA', DATE '2022-03-25', 5);
INSERT INTO speedUnleash.customers (customerId, customerName, region, registrationDate, managerId) 
VALUES (8, 'APAC Partners', 'APAC', DATE '2022-01-20', NULL);
INSERT INTO speedUnleash.customers (customerId, customerName, region, registrationDate, managerId) 
VALUES (9, 'Sunrise Trading', 'APAC', DATE '2022-05-10', 8);
INSERT INTO speedUnleash.customers (customerId, customerName, region, registrationDate, managerId) 
VALUES (10, 'southern cross', 'APAC', DATE '2022-06-15', 8);
COMMIT;

-- Populate 'products'.
PROMPT --- Populating 'products' table...
INSERT INTO speedUnleash.products (productName, category) 
VALUES ('Laptop Pro', 'Electronics');        -- productId 1
INSERT INTO speedUnleash.products (productName, category) 
VALUES ('Wireless Mouse', 'Electronics');   -- productId 2 (will be made rare)
INSERT INTO speedUnleash.products (productName, category) 
VALUES ('Office Chair', 'Furniture');       -- productId 3
INSERT INTO speedUnleash.products (productName, category) 
VALUES ('Standing Desk', 'Furniture');      -- productId 4
COMMIT;

-- Populate 'customerOrders' with a large and skewed dataset.
DECLARE
    v_product_id NUMBER;
BEGIN
    FOR i IN 1..100000 LOOP
        -- DATA SKEW: Make 'productId = 2' rare to highlight B-Tree index effectiveness.
        -- It will only be chosen about 5% of the time.
        IF DBMS_RANDOM.VALUE(1, 100) <= 5 THEN
            v_product_id := 2; -- The rare product
        ELSE
            -- Pick one of the common speedUnleash.products
            SELECT DECODE(TRUNC(DBMS_RANDOM.VALUE(1,4)), 1, 1, 2, 3, 3, 4) INTO v_product_id FROM DUAL;
        END IF;

        INSERT INTO speedUnleash.customerOrders (customerId, productId, orderDate, orderStatus, quantity, unitPrice)
        VALUES (
            TRUNC(DBMS_RANDOM.VALUE(1, 11)), -- Random customer
            v_product_id,                    -- Skewed product
            DATE '2023-01-01' + TRUNC(DBMS_RANDOM.VALUE(0, 365)), -- Random date in 2023
            -- Low cardinality status, including NULLs
            CASE TRUNC(DBMS_RANDOM.VALUE(1, 6))
                WHEN 1 THEN 'PENDING'
                WHEN 2 THEN 'SHIPPED'
                WHEN 3 THEN 'DELIVERED'
                WHEN 4 THEN 'CANCELLED'
                ELSE NULL
            END,
            TRUNC(DBMS_RANDOM.VALUE(1, 10)),  -- Random quantity
            TRUNC(DBMS_RANDOM.VALUE(50, 2000), 2) -- Random price
        );
    END LOOP;
END;
/

BEGIN
    -- Add specific, high-value orders for the final problem to ensure meaningful results
    -- for APAC Partners' sub-organizations (customers 9 and 10).
    -- High-value Electronics for Sunrise Trading
    INSERT INTO speedUnleash.customerOrders (customerId, productId, orderDate, orderStatus, quantity, unitPrice) 
VALUES (9, 1, DATE '2023-03-15', 'DELIVERED', 50, 1800);
    INSERT INTO speedUnleash.customerOrders (customerId, productId, orderDate, orderStatus, quantity, unitPrice) 
VALUES (9, 2, DATE '2023-04-20', 'DELIVERED', 100, 75);
    -- High-value Furniture for Sunrise Trading
    INSERT INTO speedUnleash.customerOrders (customerId, productId, orderDate, orderStatus, quantity, unitPrice) 
VALUES (9, 3, DATE '2023-05-10', 'SHIPPED', 80, 350);
    INSERT INTO speedUnleash.customerOrders (customerId, productId, orderDate, orderStatus, quantity, unitPrice) 
VALUES (9, 4, DATE '2023-06-25', 'SHIPPED', 40, 950);
    -- High-value Furniture for southern cross
    INSERT INTO speedUnleash.customerOrders (customerId, productId, orderDate, orderStatus, quantity, unitPrice) 
VALUES (10, 3, DATE '2023-07-01', 'DELIVERED', 90, 340);
    INSERT INTO speedUnleash.customerOrders (customerId, productId, orderDate, orderStatus, quantity, unitPrice) 
VALUES (10, 4, DATE '2023-08-11', 'DELIVERED', 60, 980);
    -- Low-value Electronics for southern cross to create a clear ranking
    INSERT INTO speedUnleash.customerOrders (customerId, productId, orderDate, orderStatus, quantity, unitPrice) 
VALUES (10, 1, DATE '2023-09-05', 'SHIPPED', 5, 1750);

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Successfully inserted 100,000 random orders and specific targeted orders.');
END;
/

-- =============================================================================
-- CRITICAL STEP: Gather Optimizer Statistics
-- =============================================================================
-- Without up-to-date statistics, the Cost-Based Optimizer (CBO) cannot make
-- intelligent decisions. It won't know that the table is large or that the
-- data in certain columns is skewed. This step is VITAL for the exercises
-- to behave as expected.
-- =============================================================================
PROMPT --- Gathering fresh statistics for the 'speedUnleash' schema...
BEGIN
    DBMS_STATS.GATHER_SCHEMA_STATS(
        ownname => 'SPEEDUNLEASH', -- Schema name in uppercase
        estimate_percent => DBMS_STATS.AUTO_SAMPLE_SIZE,
        method_opt => 'FOR ALL COLUMNS SIZE AUTO',
        cascade => TRUE
    );
    DBMS_OUTPUT.PUT_LINE('Optimizer statistics have been gathered for the speedUnleash schema.');
END;
/

PROMPT --- DATASET AND STATISTICS ARE READY. THE EXERCISES CAN NOW BEGIN. ---
SET ECHO OFF
SET FEEDBACK OFF