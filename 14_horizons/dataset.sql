-- DDL and DML for the 'horizons' user schema.
-- This script should be run by a DBA (e.g., SYS, SYSTEM).
-- It is idempotent and can be run multiple times.
SET DEFINE OFF;
SET SERVEROUTPUT ON;

BEGIN
    EXECUTE IMMEDIATE 'DROP USER horizons CASCADE';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -1918 THEN -- ORA-01918: user 'HORIZONS' does not exist
            RAISE;
        END IF;
END;
/

CREATE USER horizons IDENTIFIED BY YourPassword;

-- Grant essential roles and privileges
GRANT CONNECT, RESOURCE, AQ_ADMINISTRATOR_ROLE TO horizons;
ALTER USER horizons QUOTA UNLIMITED ON USERS;

-- Grant specific permissions needed for the script
GRANT CREATE TYPE, CREATE TABLE, CREATE SEQUENCE, CREATE PROCEDURE TO horizons;
GRANT EXECUTE ON DBMS_AQADM TO horizons;
GRANT EXECUTE ON DBMS_AQ TO horizons;

-- Clean up existing objects to ensure a clean slate (optional, as DROP USER CASCADE does this)
BEGIN
    FOR r IN (SELECT object_name, object_type FROM all_objects WHERE owner = 'HORIZONS' AND object_type IN ('TABLE', 'PROCEDURE', 'TYPE', 'QUEUE', 'QUEUE TABLE', 'SEQUENCE')) LOOP
        BEGIN
            IF r.object_type = 'QUEUE' THEN
                DBMS_AQADM.STOP_QUEUE(queue_name => 'horizons."' || r.object_name || '"');
                DBMS_AQADM.DROP_QUEUE(queue_name => 'horizons."' || r.object_name || '"');
            ELSIF r.object_type = 'QUEUE TABLE' THEN
                DBMS_AQADM.DROP_QUEUE_TABLE(queue_table => 'horizons."' || r.object_name || '", force => TRUE');
            ELSIF r.object_type = 'TABLE' THEN
                EXECUTE IMMEDIATE 'DROP TABLE horizons."' || r.object_name || '" PURGE';
            ELSE
                EXECUTE IMMEDIATE 'DROP ' || r.object_type || ' horizons."' || r.object_name || '"';
            END IF;
        EXCEPTION
            WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE('Could not drop ' || r.object_type || ' horizons."' || r.object_name || '": ' || SQLERRM);
        END;
    END LOOP;
END;
/

-- TYPES
CREATE OR REPLACE TYPE horizons.PartRequestType AS OBJECT (
    orderId         NUMBER(10),
    partId          NUMBER(10),
    quantity        NUMBER(5),
    requestTimestamp TIMESTAMP WITH TIME ZONE
);
/

-- TABLE DEFINITIONS
CREATE TABLE horizons.productCatalog (
    partId          NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    partName        VARCHAR2(100) NOT NULL,
    parentPartId    NUMBER REFERENCES horizons.productCatalog(partId),
    isReservable    BOOLEAN DEFAULT TRUE NOT NULL -- New 23c BOOLEAN type
) ANNOTATIONS (DisplayName 'Master Product Hierarchy', Version '1.1');
COMMENT ON TABLE horizons.productCatalog IS 'Hierarchical bill of materials for all products.';

CREATE TABLE horizons.customerOrders (
    orderId         NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    orderDate       DATE DEFAULT SYSDATE,
    customerName    VARCHAR2(100),
    orderStatus     VARCHAR2(20) DEFAULT 'PENDING'
);

CREATE TABLE horizons.orderDetails (
    orderId         NUMBER PRIMARY KEY REFERENCES horizons.customerOrders(orderId),
    detailXML       XMLTYPE
);

CREATE TABLE horizons.appConfiguration (
    configKey       VARCHAR2(100) PRIMARY KEY,
    configValue     VARCHAR2(500)
);
COMMENT ON TABLE horizons.appConfiguration IS 'Stores config data, potentially sourced from Azure or OCI';

-- ADVANCED QUEUING (AQ) SETUP
BEGIN
    DBMS_AQADM.CREATE_QUEUE_TABLE(
        queue_table        => 'horizons.partRequestQueueTable',
        queue_payload_type => 'horizons.PartRequestType',
        multiple_consumers => TRUE,
        comment            => 'Queue table for component reservation requests'
    );
    DBMS_AQADM.CREATE_QUEUE(
        queue_name  => 'horizons.partRequestTopic',
        queue_table => 'horizons.partRequestQueueTable'
    );
    DBMS_AQADM.START_QUEUE(queue_name => 'horizons.partRequestTopic', enqueue => TRUE, dequeue => TRUE);
END;
/

-- DATA POPULATION
-- Let the IDENTITY column generate keys automatically
INSERT INTO horizons.productCatalog (partName, parentPartId) VALUES ('Gaming PC', NULL); -- ID=1
INSERT INTO horizons.productCatalog (partName, parentPartId) VALUES ('Motherboard Assembly', 1); -- ID=2
INSERT INTO horizons.productCatalog (partName, parentPartId) VALUES ('CPU', 2); -- ID=3
INSERT INTO horizons.productCatalog (partName, parentPartId) VALUES ('RAM 32GB Kit', 2); -- ID=4
INSERT INTO horizons.productCatalog (partName, parentPartId) VALUES ('GPU', 1); -- ID=5

-- Insert customers
INSERT INTO horizons.customerOrders (customerName) VALUES ('Alice');
INSERT INTO horizons.customerOrders (customerName) VALUES ('Bob');
COMMIT; -- Commit to make new orderIDs visible to the next statements

-- Insert order details with un-escaped XML and correct part numbers
INSERT INTO horizons.orderDetails (orderId, detailXML) VALUES (
  (SELECT orderId FROM HORIZONS.CUSTOMERORDERS WHERE customerName = 'Alice'),
  XMLTYPE('<order anbr="ORD201">
             <items>
               <item partNumber="3" quantity="1"/>
               <item partNumber="4" quantity="2"/>
             </items>
           </order>')
);

INSERT INTO horizons.orderDetails (orderId, detailXML) VALUES (
  (SELECT orderId FROM HORIZONS.CUSTOMERORDERS WHERE customerName = 'Bob'),
  XMLTYPE('<order anbr="ORD202">
             <items>
               <item partNumber="5" quantity="1"/>
             </items>
           </order>')
);

INSERT INTO horizons.appConfiguration (configKey, configValue) VALUES ('azure.config.connectionstring', 'Endpoint=https://myapp.azconfig.io;Id=xxxx;Secret=xxxx');
INSERT INTO horizons.appConfiguration (configKey, configValue) VALUES ('oci.objectstorage.bucket.uri', 'oci://my-bucket@my-tenancy/config/app.json');

COMMIT;

-- Grant necessary privileges for subsequent exercises
GRANT EXECUTE ON horizons.PartRequestType TO PUBLIC;
BEGIN
    DBMS_AQADM.GRANT_QUEUE_PRIVILEGE('ENQUEUE', 'horizons.partRequestTopic', 'PUBLIC');
    DBMS_AQADM.GRANT_QUEUE_PRIVILEGE('DEQUEUE', 'horizons.partRequestTopic', 'PUBLIC');
END;
/