        -- 1. From PostgreSQL to SQL ORACLE with ORACLE DB


--  Disadvantages and Pitfalls

--      3.1 Exercise 2.1: Data Type Pitfalls and Misunderstandings

-- 1. VARCHAR2 Size & Semantics: An EmployeeRoster firstName column is
-- VARCHAR2(10 BYTE). What happens if you try to insert ’Christophe’ (10 chars,
-- 10 bytes in ASCII)? What if you try to insert ’René’ (4 chars, but ’é’ can be 2 bytes
-- in UTF8)? What is the pitfall if NLS_LENGTH_SEMANTICS is BYTE when dealing
-- with multi-byte characters?
-- 2. NUMBER Precision/Scale:
-- • If salary in EmployeeRoster was defined only as NUMBER (no preci-
-- sion/scale) and you inserted 12345.678912345, what would be stored?
-- What’s a potential pitfall of omitting precision/scale for financial data?
-- • If commissionRate is NUMBER(4,2) and you attempt to insert 0.125 or
-- 10.50. What happens in each case? What if you try to insert 123.45?
-- 3. Oracle DATE Time Component: A PostgreSQL user accustomed to DATE being
-- date-only inserts TO_DATE('2023-11-10', 'YYYY-MM-DD')into hireDate
-- (Oracle DATE). They later run SELECT * FROM EmployeeRoster WHERE hireDate
-- = TO_DATE('2023-11-10 10:00:00', 'YYYY-MM-DD HH24:MI:SS');. Will
-- they find the record? Why or why not? What’s the pitfall?
-- 4. TIMESTAMPWITHLOCALTIMEZONE(TSLTZ):localEntryTimein ProductCatalog
-- is TIMESTAMP WITH LOCAL TIME ZONE.
-- • Session A (Time Zone ’America/New_York’) inserts TIMESTAMP '2023-11-10
-- 10:00:00 America/New_York'.
-- • Session B (Time Zone ’Europe/London’) queries this exact row. What time
-- will Session B see (conceptually, considering typical UTC offsets)?
-- • What is a potential pitfall if the database’s DBTIMEZONE is different from
-- the application server’s OS time zone, and TSLTZ data is inserted using
-- SYSTIMESTAMP without explicit time zone specification?

--      3.2 Exercise 2.2: NULL Handling Function Caveats
-- 1. NVLTypeConversion: What happens if you use NVL(salary, 'Not Available')
-- where salary is NUMBER(10,2)? Why is this a pitfall? How should it be cor-
-- rected if the goal is a string output?
-- 2. NVL2TypeMismatch: Consider NVL2(hireDate, SYSDATE + 7, 'Not Hired
-- Yet'). hireDate is DATE. What is the likely data type of the result if hireDate
-- is NOT NULL? What if it IS NULL? What’s the potential issue and how can Or-
-- acle try to resolve it (possibly leading to errors)?
-- 3. COALESCEArgumentEvaluation: While COALESCEreturns the first non-NULL
-- expression, all expressions provided to it must be of data types that are implicitly
-- convertible to a common data type, determined by the first non-NULL expres-
-- sion. What error might occur with COALESCE(numericColumn, dateColumn,
-- 'textFallback') if numericColumn is NULL but dateColumn is not?

--      3.3 Exercise 2.3: DECODE and ROWNUM Logic Traps
-- 1. DECODE’sNULLHandling: DECODE(colA, colB, 'Match', 'No Match').
-- If both colA and colB are NULL, what does this return? How does this differ
-- from CASE WHEN colA = colB THEN 'Match' ELSE 'No Match' END?
-- When could DECODE’s behavior be a pitfall?
-- 2. ROWNUM for Pagination - Incorrect Attempt: A developer wants to display the
-- 3rd and 4th products from ProductCatalog (in order of productId). They
-- write:
-- 1 SELECT productName FROM ProductCatalog WHERE ROWNUM BETWEEN 3 AND 4
-- ORDER BY productId;
-- Why will this query return no rows?
-- 3. ROWNUM with ORDER BY - Misconception: What is the output of the fol-
-- lowing query? Is it guaranteed to be the two products whose names are last
-- alphabetically? Explain.
-- 1 SELECT productName, ROWNUM FROM ProductCatalog WHERE ROWNUM <= 2 ORDER
-- BY productName DESC;


--  4 Contrasting with Ineﬀicient Common Solutions

--      4.1 Exercise 3.1: Suboptimal Logic vs. Oracle SQL Eﬀiciency
-- 1. Client-SideNULLHandling: A developer fetches firstNameand commissionRate
-- from EmployeeRoster. In their application code (e.g., Java/Python), they loop
-- through results: if commissionRate is null, they display ”$0.00”, otherwise
-- they display the actual rate.
-- • Show the eﬀicient Oracle SQL way to produce a commissionDisplay col-
-- umn directly using an Oracle NULL handling function.
-- • What is the loss of advantage (e.g., performance, network traﬀic) with the
-- client-side approach?
-- 2. Client-SideConditionalLogic: For each product in ProductCatalog, if productCategory
-- is ’Software’, display ’Digital Good’. If ’Hardware’, display ’Physical Good’. Oth-
-- erwise, ’Misc Good’. This logic is currently in client code.
-- • Demonstrate the eﬀicient Oracle SQL way using a CASE expression.
-- • Why is performing this categorization in SQL generally better than in client
-- code for reporting?

--      4.2 Exercise 3.2: Ineﬀicient ROWNUM Usage and DUAL Misconcep-
-- tions
-- 1. Ineﬀicient DUAL Usage: A process needs to log the current timestamp and the
-- current user performing an action. The developer writes:
-- 1 -- Get timestamp
-- 2 SELECT SYSTIMESTAMP FROM DUAL; -- Result captured by app
-- 3 -- Get user
-- 4 SELECT USER FROM DUAL; -- Result captured by app
-- Show the eﬀicient way. What Oracle value is lost by the ineﬀicient approach?
-- 2. Incorrect Top-N with ROWNUM: To find the 3 cheapest products *that are not
-- free* from ProductCatalog, a developer writes:
-- 1 SELECT productName, unitPrice
-- 2 FROM ProductCatalog
-- 3 WHERE unitPrice > 0 AND ROWNUM <= 3 -- Attempt to filter non-free
-- first, then take top 3
-- 4 ORDER BY unitPrice ASC;
-- Explain why this is not guaranteed to give the 3 overall cheapest non-free prod-
-- ucts. Present the eﬀicient, correct Oracle-idiomatic way.


--  5 Hardcore Combined Problem

--      5.1 Exercise 4.1: Multi-Concept Oracle Challenge for ”Employee Per-
-- formance Review Prep”
-- Scenario: Management needs a preliminary report for performance reviews. The re-
-- port should identify the top 2 longest-serving ’Programmer’ employees from the ’IT’
-- department. For these employees, provide a ”Review Focus” and details about their
-- bio and tenure.
-- Requirements:
-- 1. Selection: Target ’Programmer’ employees in the ’IT’ department only.
-- 2. Output Columns:
-- • employeeId (NUMBER)
-- • employeeName (VARCHAR2, format: ’LastName, FirstName’)
-- • jobTitle (VARCHAR2)
-- • department (VARCHAR2)
-- • hireDateDisplay (VARCHAR2, formatted as ’Month DD, YYYY’, e.g.,
-- ’January 03, 2006’)
-- • yearsOfService(NUMBER, calculated to one decimal place from hireDate
-- to SYSDATE. Use MONTHS_BETWEEN and DUAL for SYSDATE if needed in
-- calculation context, though SYSDATE can be used directly).
-- • bioExtract (NVARCHAR2: If bio is not NULL, show the first 30 char-
-- acters of bio followed by ’...’. If bio is NULL, display ’No Bio on File’. Use
-- NVL or COALESCE and string functions).
-- • reviewFocus (VARCHAR2):
-- – Use a CASE expression.
-- – If commissionRate IS NOT NULL, focus is ’Sales & Technical Skills
-- Review’.
-- – Else (if commissionRate IS NULL):
-- ∗ Use DECODE on managerId. If managerId is 102, focus is ’Project
-- Leadership Potential’.
-- ∗ Otherwise (for other managers or NULL managerId for program-
-- mers), focus is ’Core Technical Deep Dive’.
-- 3. Top-NLogic: The final output must be strictly limited to the top 2 longest-serving
-- employees (earliest hireDate) based on the above criteria. Use ROWNUM cor-
-- rectly for this.
-- 4. Comments: Include a brief multi-line comment explaining the report’s purpose
-- and a single-line comment for the ROWNUM filtering logic.
-- 5. DUAL Table (Implicit/Explicit): Use of SYSDATE implicitly involves concepts
-- related to DUAL’s role in providing such values.
-- 11
-- Bridging from PostgreSQL: This problem involves concepts like string manipula-
-- tion (SUBSTR, concatenation), date calculations (MONTHS_BETWEEN vs. PostgreSQL
-- age/interval functions), conditional logic (CASE is similar, DECODE is new), NULL
-- handling (NVL/COALESCE vs. PG COALESCE), and Top-N queries (ROWNUM vs. PG
-- LIMIT).