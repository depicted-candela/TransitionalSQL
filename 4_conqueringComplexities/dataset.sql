-- DDL using IF NOT EXISTS (Oracle 23ai) where appropriate
CREATE TABLE IF NOT EXISTS conqueringcomplexities.ProductCategories (
    CategoryID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    CategoryName VARCHAR2(100) NOT NULL UNIQUE,
    CategoryDescription VARCHAR2(500)
);

CREATE TABLE IF NOT EXISTS conqueringcomplexities.Products (
    ProductID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    CategoryID NUMBER,
    ProductName VARCHAR2(100) NOT NULL,
    ProductDescription CLOB,
    ProductImage BLOB,
    TechnicalSpecsXML XMLTYPE, -- Default storage is Binary XML; can be specified as TBX in 23ai
    ComplianceInfoJSON JSON,   -- Native JSON, binary format by default in 23ai
    UnitPrice NUMBER(10,2),
    StockQuantity NUMBER,
    AddedDate DATE DEFAULT SYSDATE,
    LastUpdated TIMESTAMP,
    IsActive BOOLEAN DEFAULT TRUE, -- Oracle 23ai Boolean type
    CONSTRAINT fkProductCategory FOREIGN KEY (CategoryID) REFERENCES conqueringcomplexities.ProductCategories(CategoryID)
);

-- Example for explicitly creating with Transportable Binary XML (TBX) - for reference
-- CREATE TABLE conqueringcomplexities.ProductsWithTBX (
--     ProductID NUMBER PRIMARY KEY,
--     ProductName VARCHAR2(100),
--     TechnicalSpecsXML XMLTYPE STORE AS TRANSPORTABLE BINARY XML
-- );

-- Drop table if it exists (for easy re-running)
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE conqueringcomplexities.Orders';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -942 THEN
            RAISE;
        END IF;
END;
/

-- Create the Orders table
CREATE TABLE conqueringcomplexities.Orders (
    OrderID         NUMBER PRIMARY KEY,
    OrderDetailsXML XMLTYPE  -- Using XMLTYPE is best for XML data
);

INSERT INTO conqueringcomplexities.Orders (OrderID, OrderDetailsXML) VALUES (
    101,
    XMLTYPE('
<order id="ORD1001">
  <customer>
    <name>Acme Corp</name>
    <contact>John Doe</contact>
  </customer>
  <items>
    <item productid="1" quantity="2">
      <name>SuperPhone X</name>
      <price>799.99</price>
      <category>Electronics</category>
    </item>
    <item productid="15" quantity="1">
      <name>PowerAdapter Universal</name>
      <price>25.50</price>
      <category>Accessories</category>
    </item>
    <item productid="7" quantity="5">
      <name>Screen Protector HD</name>
      <price>9.99</price>
      <category>Accessories</category>
    </item>
  </items>
  <shipping_address>
    <street>123 Main St</street>
    <city>Anytown</city>
  </shipping_address>
</order>
')
);

-- Insert data for another order (ORD1002)
INSERT INTO conqueringcomplexities.Orders (OrderID, OrderDetailsXML) VALUES (
    102,
    XMLTYPE('
<order id="ORD1002">
  <customer>
    <name>Beta LLC</name>
    <contact>Jane Smith</contact>
  </customer>
  <items>
    <item productid="22" quantity="1">
      <name>UltraBook Pro</name>
      <price>1299.00</price>
      <category>Computers</category>
    </item>
    <item productid="15" quantity="1">
      <name>PowerAdapter Universal</name>
      <price>25.50</price>
      <category>Accessories</category>
    </item>
  </items>
  <shipping_address>
    <street>456 Oak Ave</street>
    <city>Otherville</city>
  </shipping_address>
</order>
')
);

-- Insert data for an order without items to test robustness (ORD1003)
INSERT INTO Orders (OrderID, OrderDetailsXML) VALUES (
    103,
    XMLTYPE('
<order id="ORD1003">
  <customer>
    <name>Gamma Inc</name>
    <contact>Peter Jones</contact>
  </customer>
  <items/> 
  <shipping_address>
    <street>789 Pine Rd</street>
    <city>New City</city>
  </shipping_address>
</order>
')
);

CREATE TABLE IF NOT EXISTS conqueringcomplexities.CustomerProfiles (
    CustomerID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    FirstName VARCHAR2(50),
    LastName VARCHAR2(50),
    Email VARCHAR2(100) UNIQUE,
    RegistrationDate TIMESTAMP WITH LOCAL TIME ZONE DEFAULT LOCALTIMESTAMP,
    PreferencesJSON JSON
);

CREATE TABLE IF NOT EXISTS Orders (
    OrderID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    CustomerID NUMBER,
    OrderDate DATE DEFAULT SYSDATE,
    OrderDetailsXML XMLTYPE,
    ShippingAddressJSON JSON,
    OrderStatus VARCHAR2(20) DEFAULT 'Pending',
    TotalAmount NUMBER(12,2),
    CONSTRAINT fkOrderCustomer FOREIGN KEY (CustomerID) REFERENCES conqueringcomplexities.CustomerProfiles(CustomerID)
);

-- For JSON Relational Duality Views
CREATE TABLE IF NOT EXISTS conqueringcomplexities.DepartmentsRelational (
    DepartmentID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    DepartmentName VARCHAR2(100) NOT NULL UNIQUE,
    Location VARCHAR2(100),
    Budget NUMBER(15,2)
);

CREATE TABLE IF NOT EXISTS conqueringcomplexities.EmployeesRelational (
    EmployeeID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    FirstName VARCHAR2(50),
    LastName VARCHAR2(50),
    Email VARCHAR2(100) UNIQUE,
    PhoneNumber VARCHAR2(20),
    HireDate DATE,
    JobTitle VARCHAR2(100),
    Salary NUMBER(10,2),
    DepartmentID NUMBER,
    ManagerID NUMBER,
    EmployeeProfileJSON JSON,
    CONSTRAINT fkEmployeeDepartment FOREIGN KEY (DepartmentID) REFERENCES conqueringcomplexities.DepartmentsRelational(DepartmentID),
    CONSTRAINT fkEmployeeManager FOREIGN KEY (ManagerID) REFERENCES conqueringcomplexities.EmployeesRelational(EmployeeID)
);

-- For JSON Collection Tables concept
CREATE TABLE IF NOT EXISTS conqueringcomplexities.ProductReviewsJSONCollection (
    ReviewID RAW(16) DEFAULT SYS_GUID() PRIMARY KEY,
    ReviewData JSON CHECK (ReviewData IS JSON) -- Enforce JSON structure
);

-- Populate Categories
INSERT INTO conqueringcomplexities.ProductCategories (CategoryName, CategoryDescription) VALUES ('Electronics', 'Gadgets and consumer electronics');
INSERT INTO conqueringcomplexities.ProductCategories (CategoryName, CategoryDescription) VALUES ('Books', 'Printed and digital books of all genres');
INSERT INTO conqueringcomplexities.ProductCategories (CategoryName, CategoryDescription) VALUES ('Home Goods', 'Items for home improvement and decor');
COMMIT;

-- Populate conqueringcomplexities.Products (using PL/SQL block for LOBs)
DECLARE
    vClob CLOB;
    vBlob BLOB;
    vElectronicsCatID NUMBER;
    vBooksCatID NUMBER;
    vHomeGoodsCatID NUMBER;
BEGIN
    SELECT CategoryID INTO vElectronicsCatID FROM conqueringcomplexities.ProductCategories WHERE CategoryName = 'Electronics';
    SELECT CategoryID INTO vBooksCatID FROM conqueringcomplexities.ProductCategories WHERE CategoryName = 'Books';
    SELECT CategoryID INTO vHomeGoodsCatID FROM conqueringcomplexities.ProductCategories WHERE CategoryName = 'Home Goods';

    -- Product 1: SuperPhone X
    vClob := 'The SuperPhone X is a revolutionary device with a stunning 6.7-inch AMOLED display, an advanced triple-camera system (108MP main), and blazing fast performance thanks to its new generation processor. It offers all-day battery life and supports ultra-fast charging. Comes with 5G, Wi-Fi 6E, and enhanced security features. Perfect for professionals and tech enthusiasts.';
    vBlob := UTL_RAW.CAST_TO_RAW('SimulatedImageDataSuperPhoneX');
    INSERT INTO conqueringcomplexities.Products (CategoryID, ProductName, ProductDescription, ProductImage, TechnicalSpecsXML, ComplianceInfoJSON, UnitPrice, StockQuantity, IsActive, LastUpdated)
    VALUES (vElectronicsCatID, 'SuperPhone X', vClob, vBlob,
        XMLTYPE.CREATEXML(
            '<specs available="true">
                <general make="TechCorp" model="SPX-001"/>
                <processor>NovaChip Gen Alpha</processor>
                <ram unit="GB">12</ram>
                <storage unit="GB">256</storage>
                <display><type>AMOLED</type><size unit="inch">6.7</size><resolution>3200x1440</resolution></display>
                <camera><main unit="MP">108</main><ultrawide unit="MP">16</ultrawide><telephoto unit="MP">12</telephoto></camera>
                <battery unit="mAh">5000</battery>
                <connectivity><network>5G</network><wifi>6E</wifi><bluetooth>5.3</bluetooth></connectivity>
            </specs>'
        ),
        JSON('{
            "ceMarking": true,
            "fccId": "A1B2C3SPX",
            "rohsCompliant": true,
            "ulListed": true,
            "certifications": ["CE", "FCC", "UL"],
            "recyclingInfo": {"material": "Aluminum, Gorilla Glass", "recyclablePercentage": 85}
        }'),
        999.00, 150, TRUE, SYSTIMESTAMP - INTERVAL '10' DAY
    );

    -- Product 2: Oracle Master Guide 23ai
    vClob := TO_CLOB('A comprehensive guide to Oracle Database 23ai, covering new features, PL/SQL development, performance tuning, and advanced data types like XML and JSON. This book is invaluable for PostgreSQL users transitioning to Oracle, offering clear explanations, practical examples, and comparative insights. Foreword by a renowned Oracle ACE Director.');
    vBlob := UTL_RAW.CAST_TO_RAW('SimulatedImageDataOracleBook');
    INSERT INTO conqueringcomplexities.Products (CategoryID, ProductName, ProductDescription, ProductImage, TechnicalSpecsXML, ComplianceInfoJSON, UnitPrice, StockQuantity, IsActive, LastUpdated)
    VALUES (vBooksCatID, 'Oracle Master Guide 23ai', vClob, vBlob,
        XMLTYPE.CREATEXML(
            '<specs available="true">
                <general type="TechnicalReference"/>
                <format>Hardcover</format>
                <pages>850</pages>
                <isbn>978-0123456789</isbn>
                <publisher>DB Books Ltd.</publisher>
                <chapters count="25">
                    <chapter title="Introduction to Oracle Architecture"/>
                    <chapter title="Advanced SQL for Oracle"/>
                    <chapter title="PL/SQL Power Programming"/>
                    <chapter title="JSON and XML in Oracle 23ai"/>
                </chapters>
            </specs>'
        ),
        JSON('{
            "ecoFriendlyPaper": true,
            "inkType": "Soy-based",
            "publisherCompliance": {"country": "UK", "ethicalSourcing": "Certified FSC"},
            "digitalVersionAvailable": true
        }'),
        79.50, 250, TRUE, SYSTIMESTAMP - INTERVAL '5' DAY
    );

    -- Product 3: Smart Coffee Maker
    vClob := TO_CLOB('Brew the perfect cup every time with the Smart Coffee Maker. Connects to Wi-Fi, allowing control via a mobile app. Features include customizable brew strength, temperature control, built-in grinder, and scheduling. Sleek stainless steel design. Easy to clean and maintain.');
    vBlob := UTL_RAW.CAST_TO_RAW('SimulatedImageDataCoffeeMaker');
    INSERT INTO conqueringcomplexities.Products (CategoryID, ProductName, ProductDescription, ProductImage, TechnicalSpecsXML, ComplianceInfoJSON, UnitPrice, StockQuantity, IsActive, LastUpdated)
    VALUES (vHomeGoodsCatID, 'Smart Coffee Maker', vClob, vBlob,
        XMLTYPE.CREATEXML(
            '<specs available="false">
                <general make="HomeSmart" model="CM-5000W"/>
                <type>Drip Coffee Maker with Grinder</type>
                <capacity unit="cups">12</capacity>
                <features><feature>Programmable</feature><feature>Wi-Fi</feature><feature>App Controlled</feature></features>
                <material>Stainless Steel, BPA-Free Plastic</material>
            </specs>'
        ),
        JSON('{
            "energyStarRated": true,
            "bpaFree": true,
            "safetyCertifications": ["ETL", "CE"],
            "warranty": {"period": "2 years", "type": "limited"}
        }'),
        129.99, 60, FALSE, SYSTIMESTAMP - INTERVAL '30' DAY
    );
    COMMIT;
END;
/

-- Populate conqueringcomplexities.CustomerProfiles
INSERT INTO conqueringcomplexities.CustomerProfiles (FirstName, LastName, Email, PreferencesJSON) VALUES ('Alice', 'Wonder', 'alice.wonder@example.com', JSON('{"notifications": {"email": true, "sms": false, "appPush": true}, "language": "en_US", "theme": "light"}'));
INSERT INTO conqueringcomplexities.CustomerProfiles (FirstName, LastName, Email, PreferencesJSON) VALUES ('Bob', 'Builder', 'bob.builder@example.com', JSON('{"notifications": {"email": true, "sms": true}, "language": "en_GB", "interests": ["home improvement", "tools"]}'));
INSERT INTO conqueringcomplexities.CustomerProfiles (FirstName, LastName, Email, PreferencesJSON) VALUES ('Charles', 'Xavier', 'charles.xavier@example.com', JSON('{"notifications": {"email": false, "appPush": true}, "language": "fr_CA", "accessibility": {"largeFont": true}}'));
COMMIT;

-- Populate Orders
DECLARE
    vAliceID NUMBER;
    vBobID NUMBER;
BEGIN
    SELECT CustomerID INTO vAliceID FROM conqueringcomplexities.CustomerProfiles WHERE Email = 'alice.wonder@example.com';
    SELECT CustomerID INTO vBobID FROM conqueringcomplexities.CustomerProfiles WHERE Email = 'bob.builder@example.com';

    INSERT INTO Orders (CustomerID, OrderDate, OrderDetailsXML, ShippingAddressJSON, OrderStatus, TotalAmount)
    VALUES (vAliceID, TO_DATE('2023-10-15', 'YYYY-MM-DD'),
        XMLTYPE.CREATEXML(
            '<order id="ORD1001" date="2023-10-15T10:30:00">
                <customer custid="' || vAliceID || '"/>
                <items>
                    <item productid="1" quantity="1">
                        <name>SuperPhone X</name>
                        <unitprice>999.00</unitprice>
                    </item>
                    <item productid="2" quantity="1">
                        <name>Oracle Master Guide 23ai</name>
                        <unitprice>79.50</unitprice>
                    </item>
                </items>
                <payment type="CreditCard" status="Approved"/>
                <shipping method="Express"/>
            </order>'
        ),
        JSON('{"recipientName": "Alice Wonder", "addressLine1": "123 Wonderland Ave", "city": "Teaville", "postalCode": "12345", "country": "US", "contactPhone": "555-0101"}'),
        'Shipped', 1078.50
    );

    INSERT INTO Orders (CustomerID, OrderDate, OrderDetailsXML, ShippingAddressJSON, OrderStatus, TotalAmount)
    VALUES (vBobID, TO_DATE('2023-10-28', 'YYYY-MM-DD'),
        XMLTYPE.CREATEXML(
            '<order id="ORD1002" date="2023-10-28T14:00:00">
                <customer custid="' || vBobID || '"/>
                <items>
                    <item productid="3" quantity="1">
                        <name>Smart Coffee Maker</name>
                        <unitprice>129.99</unitprice>
                    </item>
                </items>
                <notes>Leave package at front porch.</notes>
                <payment type="PayPal" status="PendingConfirmation"/>
            </order>'
        ),
        JSON('{"recipientName": "Bob Builder", "addressLine1": "456 Construction Ln", "city": "Builderton", "postalCode": "67890", "country": "GB", "contactPhone": "555-0202"}'),
        'Processing', 129.99
    );
    
    INSERT INTO Orders (CustomerID, OrderDate, OrderDetailsXML, ShippingAddressJSON, OrderStatus, TotalAmount)
    VALUES (vAliceID, TO_DATE('2023-11-05', 'YYYY-MM-DD'),
        XMLTYPE.CREATEXML(
            '<order id="ORD1003" date="2023-11-05T09:15:00">
                <customer custid="' || vAliceID || '"/>
                <items>
                    <item productid="2" quantity="2"> <!-- Alice buys another 2 Oracle books -->
                        <name>Oracle Master Guide 23ai</name>
                        <unitprice>79.50</unitprice>
                    </item>
                </items>
                <payment type="CreditCard" status="Approved"/>
            </order>'
        ),
        JSON('{"recipientName": "Alice Wonder", "addressLine1": "123 Wonderland Ave", "city": "Teaville", "postalCode": "12345", "country": "US", "contactPhone": "555-0101"}'),
        'Delivered', 159.00
    );
    COMMIT;
END;
/

-- Populate conqueringcomplexities.DepartmentsRelational and conqueringcomplexities.EmployeesRelational
INSERT INTO conqueringcomplexities.DepartmentsRelational (DepartmentName, Location, Budget) VALUES ('Technology', 'Campus A, Bldg 1', 7500000);
INSERT INTO conqueringcomplexities.DepartmentsRelational (DepartmentName, Location, Budget) VALUES ('Sales & Marketing', 'Campus B, Bldg 3', 4000000);
INSERT INTO conqueringcomplexities.DepartmentsRelational (DepartmentName, Location, Budget) VALUES ('Operations', 'Campus A, Bldg 2', 5000000);
COMMIT;

DECLARE
    vTechDeptID NUMBER;
    vSalesDeptID NUMBER;
    vOpsDeptID NUMBER;
    vJohnDoeID NUMBER;
BEGIN
    SELECT DepartmentID INTO vTechDeptID FROM conqueringcomplexities.DepartmentsRelational WHERE DepartmentName = 'Technology';
    SELECT DepartmentID INTO vSalesDeptID FROM conqueringcomplexities.DepartmentsRelational WHERE DepartmentName = 'Sales & Marketing';
    SELECT DepartmentID INTO vOpsDeptID FROM conqueringcomplexities.DepartmentsRelational WHERE DepartmentName = 'Operations';

    INSERT INTO conqueringcomplexities.EmployeesRelational (FirstName, LastName, Email, PhoneNumber, HireDate, JobTitle, Salary, DepartmentID, ManagerID, EmployeeProfileJSON)
    VALUES ('John', 'Doe', 'john.doe@example.com', '555-1001', TO_DATE('2019-06-01', 'YYYY-MM-DD'), 'Lead XML Architect', 130000, vTechDeptID, NULL,
    JSON('{"skills": ["XML", "XSLT", "XPath", "XQuery", "Oracle XMLDB", "TBX"], "clearanceLevel": "TopSecret", "projects": ["LegacySystemMigration", "XMLGatewayV2"]}'));
    SELECT EmployeeID INTO vJohnDoeID FROM conqueringcomplexities.EmployeesRelational WHERE Email = 'john.doe@example.com';

    INSERT INTO conqueringcomplexities.EmployeesRelational (FirstName, LastName, Email, PhoneNumber, HireDate, JobTitle, Salary, DepartmentID, ManagerID, EmployeeProfileJSON)
    VALUES ('Jane', 'Smith', 'jane.smith@example.com', '555-1002', TO_DATE('2020-03-15', 'YYYY-MM-DD'), 'Senior JSON Developer', 125000, vTechDeptID, vJohnDoeID,
    JSON('{"skills": ["JSON", "REST APIs", "JavaScript", "Node.js", "Oracle JSON", "JSON-RDV"], "certifications": ["Oracle JSON Expert", "AWS Developer Associate"], "focusArea": "Cloud APIs"}'));

    INSERT INTO conqueringcomplexities.EmployeesRelational (FirstName, LastName, Email, PhoneNumber, HireDate, JobTitle, Salary, DepartmentID, ManagerID, EmployeeProfileJSON)
    VALUES ('Robert', 'Jones', 'robert.jones@example.com', '555-2001', TO_DATE('2018-11-01', 'YYYY-MM-DD'), 'LOB Management Specialist', 110000, vOpsDeptID, NULL,
    JSON('{"expertise": ["DBMS_LOB", "SecureFiles", "LOB Performance", "Data Archival"], "tools": ["Oracle SQLDev", "Toad", "Custom PLSQL Scripts"]}'));
    COMMIT;
END;
/

-- Populate conqueringcomplexities.ProductReviewsJSONCollection (for JSON Collection Table concept)
INSERT INTO conqueringcomplexities.ProductReviewsJSONCollection (ReviewData)
VALUES (JSON('{
    "productID": 1, "customerEmail": "alice.wonder@example.com", "rating": 5, "reviewDate": "2023-10-20T10:00:00Z",
    "title": "Absolutely stellar phone!",
    "comment": "The SuperPhone X is a game changer. Performance is smooth, camera is incredible. Worth every penny.",
    "verifiedPurchase": true, "tags": ["performance", "camera", "premium"]
}'));

INSERT INTO conqueringcomplexities.ProductReviewsJSONCollection (ReviewData)
VALUES (JSON('{
    "productID": 2, "customerEmail": "alice.wonder@example.com", "rating": 4, "reviewDate": "2023-10-22T15:30:00Z",
    "title": "Excellent Oracle Guide",
    "comment": "Very thorough and well-written. Helped me understand the new 23ai features quickly. A must-have for Oracle devs.",
    "verifiedPurchase": true, "tags": ["oracle23ai", "plsql", "reference"]
}'));

INSERT INTO conqueringcomplexities.ProductReviewsJSONCollection (ReviewData)
VALUES (JSON('{
    "productID": 3, "customerEmail": "bob.builder@example.com", "rating": 3, "reviewDate": "2023-11-01T09:00:00Z",
    "title": "Good, but app needs work",
    "comment": "The Smart Coffee Maker makes decent coffee and looks good. The app connectivity is a bit flaky at times.",
    "verifiedPurchase": true, "helpfulVotes": 5, "tags": ["smart home", "coffee", "iot"]
}'));

COMMIT;