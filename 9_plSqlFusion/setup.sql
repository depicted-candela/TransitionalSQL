-- DDL and DML for plSqlFusion Schema
-- Run this block to set up the environment for all exercises.

DROP USER plSqlFusion CASCADE;

-- Administrative setup (run as SYS or a user with DBA privileges)
-- Note: Replace 'your_strong_password' with a secure password.
CREATE USER plSqlFusion IDENTIFIED BY "your_strong_password";
GRANT CONNECT, RESOURCE, UNLIMITED TABLESPACE TO plSqlFusion;

-- Grant privileges for specific packages
GRANT EXECUTE ON DBMS_AQADM TO plSqlFusion;
GRANT EXECUTE ON DBMS_AQ TO plSqlFusion;
GRANT EXECUTE ON DBMS_LOB TO plSqlFusion;
GRANT EXECUTE ON DBMS_XMLGEN TO plSqlFusion;

-- Grant MLE privileges (Oracle 23ai+)
GRANT CREATE MLE TO plSqlFusion;

-- For UTL_FILE, a directory object must be created by a privileged user.
-- IMPORTANT: This path must exist on your database server's file system,
-- and the 'oracle' OS user must have read/write permissions to it.
CREATE OR REPLACE DIRECTORY UTL_FILE_DIR AS '/tmp/oracle_files';
GRANT READ, WRITE ON DIRECTORY UTL_FILE_DIR TO plSqlFusion;

-- Connect as the plSqlFusion user to run the rest of the script
CONNECT plSqlFusion/"your_strong_password";

-- Set session for output
SET SERVEROUTPUT ON;

-- Table for DBMS_LOB exercises
CREATE TABLE productCatalogs (
    catalogId NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    productLine VARCHAR2(100),
    catalogPDF BLOB,
    catalogDescription CLOB,
    CONSTRAINT pk_productCatalogs PRIMARY KEY (catalogId)
);

-- Table for demonstrating the "inefficient" way of queuing (for DBMS_AQ contrast)
CREATE TABLE processingQueue (
    jobId NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    payload VARCHAR2(4000),
    status VARCHAR2(20) DEFAULT 'NEW',
    createTimestamp TIMESTAMP DEFAULT SYSTIMESTAMP,
    processedBy VARCHAR2(100),
    CONSTRAINT pk_processingQueue PRIMARY KEY (jobId)
);

-- Tables for JavaScript and Hardcore Problem exercises
CREATE TABLE eventLogs (
    eventId NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    device VARCHAR2(50),
    eventTimestamp TIMESTAMP,
    metrics JSON,
    CONSTRAINT pk_eventLogs PRIMARY KEY (eventId)
);

CREATE TABLE departments (
    departmentId NUMBER PRIMARY KEY,
    departmentName VARCHAR2(100),
    managerId NUMBER -- Self-referencing FK will be added after employees table
);

CREATE TABLE employees (
    employeeId NUMBER PRIMARY KEY,
    firstName VARCHAR2(50),
    lastName VARCHAR2(50),
    email VARCHAR2(100) UNIQUE,
    hireDate DATE,
    salary NUMBER(10, 2),
    managerId NUMBER,
    departmentId NUMBER,
    CONSTRAINT fk_emp_dept FOREIGN KEY (departmentId) REFERENCES departments(departmentId),
    CONSTRAINT fk_emp_mgr FOREIGN KEY (managerId) REFERENCES employees(employeeId)
);

-- Add the self-referencing constraint to departments
ALTER TABLE departments ADD CONSTRAINT fk_dept_mgr FOREIGN KEY (managerId) REFERENCES employees(employeeId);

-- 1. Insert departments first, with NULL managerId
INSERT INTO departments (departmentId, departmentName, managerId) VALUES (10, 'Corporate', NULL);
INSERT INTO departments (departmentId, departmentName, managerId) VALUES (20, 'Technology', NULL);
INSERT INTO departments (departmentId, departmentName, managerId) VALUES (30, 'Development', NULL);
INSERT INTO departments (departmentId, departmentName, managerId) VALUES (40, 'Operations', NULL);

-- 2. Insert employees, referencing existing departments
INSERT INTO employees (employeeId, firstName, lastName, email, hireDate, salary, managerId, departmentId)
VALUES (1, 'Jane', 'Doe', 'jane.doe@example.com', DATE '2022-01-15', 150000, NULL, 10);

INSERT INTO employees (employeeId, firstName, lastName, email, hireDate, salary, managerId, departmentId)
VALUES (2, 'John', 'Smith', 'john.smith@example.com', DATE '2023-03-10', 110000, 1, 20);

INSERT INTO employees (employeeId, firstName, lastName, email, hireDate, salary, managerId, departmentId)
VALUES (3, 'Emily', 'Jones', 'emily.jones@example.com', DATE '2023-05-20', 95000, 2, 30);

-- 3. Now update departments to set managerId fields (now that employees exist)
UPDATE departments SET managerId = 1 WHERE departmentId = 10;
UPDATE departments SET managerId = 2 WHERE departmentId = 20;
UPDATE departments SET managerId = 2 WHERE departmentId = 30;
UPDATE departments SET managerId = 1 WHERE departmentId = 40;

-- 4. Insert event logs
INSERT INTO eventLogs (device, eventTimestamp, metrics) VALUES ('Sensor-A1', SYSTIMESTAMP, '{"temperature": 25.5, "humidity": 60, "status": "active"}');
INSERT INTO eventLogs (device, eventTimestamp, metrics) VALUES ('Sensor-B2', SYSTIMESTAMP, '{"temperature": -5.2, "pressure": 1012, "status": "active"}');

COMMIT;